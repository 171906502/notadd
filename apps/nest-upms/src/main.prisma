type AccessToken @db(name: "accessToken") {
  access_token_id: Int! @id(strategy: SEQUENCE) @sequence(name: "accessToken_access_token_id_seq", initialValue: 1, allocationSize: 1)
  accessToken: String! @db(name: "access_token")
  appid: String!
  createTime: DateTime! @db(name: "create_time")
  expiresIn: DateTime! @db(name: "expires_in")
  grantType: Int! @db(name: "grant_type")
  ip: String!
  openid: String!
  platform: String!
  refreshToken: RefreshToken
  scope: String!
  status: Int!
  updateTime: DateTime! @db(name: "update_time")
}

type Addon @db(name: "addon") {
  appid: Int! @id(strategy: SEQUENCE) @sequence(name: "addon_appid_seq", initialValue: 1, allocationSize: 1)
  addonPermissionsPermission: [AddonPermissionsPermission]
  appsecret: String!
  createTime: DateTime! @db(name: "create_time")
  description: String! @default(value: "")
  icon: String! @default(value: "")
  name: String!
  permissionAddonsAddon: [PermissionAddonsAddon]
  pid: Int! @default(value: 0)
  status: Int! @default(value: 1)
  title: String!
  updateTime: DateTime! @db(name: "update_time")
}

type AddonPermission @db(name: "addon_permission") {
  addon_permission_id: Int! @id(strategy: SEQUENCE) @sequence(name: "addon_permission_addon_permission_id_seq", initialValue: 1, allocationSize: 1)
  addonId: Int! @db(name: "addon_id")
  createTime: DateTime! @db(name: "create_time")
  permissionId: Int! @db(name: "permission_id")
  updateTime: DateTime! @db(name: "update_time")
}

type AddonPermissionsPermission @db(name: "addon_permissions_permission") @relationTable {
  addonAppid: Addon!
  permissionId: Permission!
}

type Article @db(name: "article") {
  article_id: Int! @id(strategy: SEQUENCE) @sequence(name: "article_article_id_seq", initialValue: 1, allocationSize: 1)
  articleCateogry: ArticleCategory @db(name: "article_cateogry_id")
  articleComment: ArticleComment
  createTime: DateTime! @db(name: "create_time")
  description: String!
  icon: String!
  thumbs: String!
  title: String!
  updateTime: DateTime! @db(name: "update_time")
}

type ArticleCategory @db(name: "article_category") {
  article_category_id: Int! @id(strategy: SEQUENCE) @sequence(name: "article_category_article_category_id_seq", initialValue: 1, allocationSize: 1)
  article: [Article]
  articleCategory: [ArticleCategory]
  createTime: DateTime! @db(name: "create_time")
  description: String!
  icon: String!
  name: String!
  pid: ArticleCategory
  title: String!
  updateTime: DateTime! @db(name: "update_time")
}

type ArticleComment @db(name: "article_comment") {
  article_comment_id: Int! @id(strategy: SEQUENCE) @sequence(name: "article_comment_article_comment_id_seq", initialValue: 1, allocationSize: 1)
  article: Article @db(name: "article_id") @unique
  content: String!
  createTime: DateTime! @db(name: "create_time")
  fromUserId: UUID! @db(name: "from_user_id")
  pid: Int!
  updateTime: DateTime! @db(name: "update_time")
}

type Logger @db(name: "logger") {
  logger_id: Int! @id(strategy: SEQUENCE) @sequence(name: "logger_logger_id_seq", initialValue: 1, allocationSize: 1)
  description: String! @default(value: "")
  # 结束时间
  endTime: DateTime! @db(name: "end_time")
  ip: String! @default(value: "")
  openid: String! @default(value: "")
  params: String!
  permissions: String! @default(value: "")
  result: String! @default(value: "")
  # 开始时间
  startTime: DateTime! @db(name: "start_time")
}

type Member @db(name: "member") {
  member_id: Int! @id(strategy: SEQUENCE) @sequence(name: "member_member_id_seq", initialValue: 1, allocationSize: 1)
  createTime: DateTime! @db(name: "create_time")
  email: String!
  name: String!
  openid: String! @default(value: "")
  password: String!
  phone: String!
  realname: String!
  salt: String!
  updateTime: DateTime! @db(name: "update_time")
  username: String!
}

type Organization @db(name: "organization") {
  organization_id: Int! @id(strategy: SEQUENCE) @sequence(name: "organization_organization_id_seq", initialValue: 1, allocationSize: 1)
  createTime: DateTime! @db(name: "create_time")
  description: String!
  displayorder: String!
  name: String!
  title: String!
  updateTime: DateTime! @db(name: "update_time")
  userOrganizationsOrganization: [UserOrganizationsOrganization]
  userRolesOrganization: [UserRolesOrganization]
}

type Permission @db(name: "permission") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: "permission_id_seq", initialValue: 1, allocationSize: 1)
  addonPermissionsPermission: [AddonPermissionsPermission]
  createTime: DateTime! @db(name: "create_time")
  decription: String! @default(value: "")
  displayorder: Int! @default(value: 0)
  fatherName: String! @db(name: "father_name")
  icon: String! @default(value: "")
  name: String!
  permissionAddonsAddon: [PermissionAddonsAddon]
  permissionRolesRole: [PermissionRolesRole]
  permissionUsersUser: [PermissionUsersUser]
  rolePermissionsPermission: [RolePermissionsPermission]
  status: Int! @default(value: 0)
  title: String!
  updateTime: DateTime! @db(name: "update_time")
  userPermission: [UserPermission]
  userPermissionsPermission: [UserPermissionsPermission]
  value: String!
}

type PermissionAddonsAddon @db(name: "permission_addons_addon") @relationTable {
  addonAppid: Addon!
  permissionId: Permission!
}

type PermissionRolesRole @db(name: "permission_roles_role") @relationTable {
  permissionId: Permission!
  roleRoleId: Role!
}

type PermissionUsersUser @db(name: "permission_users_user") @relationTable {
  permissionId: Permission!
  userUserId: User!
}

type PostCategory @db(name: "postCategory") {
  post_post_category_idid: Int! @id(strategy: SEQUENCE) @sequence(name: "postCategory_post_post_category_idid_seq", initialValue: 1, allocationSize: 1)
  createTime: DateTime! @db(name: "create_time")
  description: String!
  icon: String!
  title: String!
  updateTime: DateTime! @db(name: "update_time")
}

type RefreshToken @db(name: "refreshToken") {
  refresh_token_id: Int! @id(strategy: SEQUENCE) @sequence(name: "refreshToken_refresh_token_id_seq", initialValue: 1, allocationSize: 1)
  createTime: DateTime! @db(name: "create_time")
  expiresIn: DateTime! @db(name: "expires_in")
  refreshToken: String! @db(name: "refresh_token")
  token: AccessToken @db(name: "token_id") @unique
  updateTime: DateTime! @db(name: "update_time")
}

type Role @db(name: "role") {
  role_id: Int! @id(strategy: SEQUENCE) @sequence(name: "role_role_id_seq", initialValue: 1, allocationSize: 1)
  createTime: DateTime! @db(name: "create_time")
  description: String! @default(value: "")
  name: String! @default(value: "")
  permissionRolesRole: [PermissionRolesRole]
  rolePermissionsPermission: [RolePermissionsPermission]
  title: String! @default(value: "")
  updateTime: DateTime! @db(name: "update_time")
}

type RolePermission @db(name: "role_permission") {
  role_permission_id: Int! @id(strategy: SEQUENCE) @sequence(name: "role_permission_role_permission_id_seq", initialValue: 1, allocationSize: 1)
  permissionId: Int! @db(name: "permission_id")
  roleId: Int! @db(name: "role_id")
}

type RolePermissionsPermission @db(name: "role_permissions_permission") @relationTable {
  permissionId: Permission!
  roleRoleId: Role!
}

type Task @db(name: "tasks") {
  post_id: Int! @id(strategy: SEQUENCE) @sequence(name: "tasks_post_id_seq", initialValue: 1, allocationSize: 1)
  content: String!
  createTime: DateTime! @db(name: "create_time")
  handlerUser: String! @db(name: "handler_user")
  status: Int!
  title: String!
  updateTime: DateTime! @db(name: "update_time")
}

type User @db(name: "user") {
  user_id: Int! @id(strategy: SEQUENCE) @sequence(name: "user_user_id_seq", initialValue: 1, allocationSize: 1)
  avatar: String!
  createTime: DateTime! @db(name: "create_time")
  email: String!
  nickname: String!
  openid: UUID!
  password: String!
  permissionUsersUser: [PermissionUsersUser]
  phone: String!
  realname: String!
  salt: String!
  sex: Int! @default(value: 0)
  unionid: String!
  updateTime: DateTime! @db(name: "update_time")
  username: String!
  userOrganizationsOrganization: [UserOrganizationsOrganization]
  userPermission: [UserPermission]
  userPermissionsPermission: [UserPermissionsPermission]
  userRolesOrganization: [UserRolesOrganization]
}

type UserOrganization @db(name: "user_organization") {
  user_orgainization_id: Int! @id(strategy: SEQUENCE) @sequence(name: "user_organization_user_orgainization_id_seq", initialValue: 1, allocationSize: 1)
  openid: String!
  orgainizationId: Int! @db(name: "orgainization_id")
}

type UserOrganizationsOrganization @db(name: "user_organizations_organization") @relationTable {
  organizationOrganizationId: Organization!
  userUserId: User!
}

type UserPermission @db(name: "user_permission") @relationTable {
  name: Permission!
  user: User! @db(name: "user_id")
}

type UserPermissionsPermission @db(name: "user_permissions_permission") @relationTable {
  permissionId: Permission!
  userUserId: User!
}

type UserRole @db(name: "user_role") {
  user_role_id: Int! @id(strategy: SEQUENCE) @sequence(name: "user_role_user_role_id_seq", initialValue: 1, allocationSize: 1)
  openid: String!
  roleId: Int! @db(name: "role_id")
}

type UserRolesOrganization @db(name: "user_roles_organization") @relationTable {
  organizationOrganizationId: Organization!
  userUserId: User!
}